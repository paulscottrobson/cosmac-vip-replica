 AS V1.42 Beta [Bld 114] - source file basic.asm - page 1 - 27/10/2017 9:02:18


       1/       0 :                     
       2/       0 : =$2                 r2 = 2
       3/       0 : =$3                 r3 = 3
       4/       0 : =$4                 r4 = 4
       5/       0 :                     
       6/       0 :                     	cpu 	1802
       7/       0 :                     
       8/    8000 :                     	org 	8000h
       9/    8000 :                     
      10/    8000 : F8 80               	ldi 	080h
      11/    8002 : B2                  	phi 	r2
      12/    8003 : F8 08               	ldi 	008h
      13/    8005 : A2                  	plo 	r2
      14/    8006 : E2                  	sex 	r2
      15/    8007 : D2                  	sep 	r2
      16/    8008 : 64                  	out 	4
      17/    8009 : 00                  	idl
      18/    800A :                     
      19/    800A : E2                  	sex 	r2
      20/    800B : F8 80               	ldi 	s1/256
      21/    800D : B4                  	phi	 	r4
      22/    800E : F8 12               	ldi 	s1&255
      23/    8010 : A4                  	plo 	r4
      24/    8011 : D4                  	sep 	r4
      25/    8012 :                     
      26/    8012 :                     s1:
      27/    8012 : F8 01               	ldi 	01
      28/    8014 : B2                  	phi 	r2
      29/    8015 : F8 00               	ldi 	00
      30/    8017 : A2                  	plo 	r2
      31/    8018 :                     
      32/    8018 : =D00H               Variables = 0D00h
      33/    8018 :                     
      34/    8018 :                     return macro 															; allows subroutine returns to disable/enable interrupts as you want.
      35/    8018 :                     	dis 																; this program uses MARK-subroutines
      36/    8018 :                     		endm
      37/    8018 :                     
      38/    8018 :                     ;
      39/    8018 :                     ;	$80-$8F 	Operators : $80:@  $81:?  $82:~  $83:!
      40/    8018 :                     ;				(Unary)
      41/    8018 :                     ; 	$90-$9F 	Operators : $90:== $91:!= $92:<  $93: >= $94:<= $95:> $96:- $97:+ 
      42/    8018 :                     ;				(Binary)	$98:*  $99:/  $9A:%  $9B: &  $9C:|  $9D:^ 
      43/    8018 :                     ;							
      44/    8018 :                     ;	$A0-$BE 	Variable. Value is 2 * offset + Variables, type is 16 bit address
      45/    8018 :                     ;
      46/    8018 :                     ;	$BF 		A string constant. String constants are ended by bit 7 being set to '1'.
      47/    8018 :                     ;
      48/    8018 :                     ;	$C0-$FE 	Represents constant values from -2 to 60
      49/    8018 :                     ;
      50/    8018 :                     ;	$FF hh ll 	Constant value outside the C0..FE range
      51/    8018 :                     ;
      52/    8018 :                     
      53/    8018 :                     ;
      54/    8018 :                     ;	r15 :	current value on the top of the stack.
      55/    8018 :                     ; 	r14	:	.0 type of value in r15 : 0=constant 1=address of 16 bit LL:HH 2=address of 8 bit.
      56/    8018 :                     ;			.1 temporary register
      57/    8018 :                     ;	r13 : 	RPN calculation stack. Starts with lower 4 bits zero ; one dummy value at start
      58/    8018 :                     ;			(r13) points to the LSB of the 2nd stack value, (r13+1) is the MSB. Expands down.
      59/    8018 :                     ;	r12 : 	Code being evaluated
      60/    8018 :                     ; 	r11 : 	Code routine address for evaluation.
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 2 - 27/10/2017 9:02:18


      61/    8018 :                     
      62/    8018 : =BH                 rxRoutine = 11
      63/    8018 : =CH                 rxCode = 12
      64/    8018 : =DH                 rxRPNStack = 13 
      65/    8018 : =EH                 rxType = 14
      66/    8018 : =FH                 rxTOS = 15
      67/    8018 :                     
      68/    8018 : =81H                ERR_Underflow = 081h								; Underflow of stack.
      69/    8018 :                     
      70/    8018 :                     Setup:
      71/    8018 : F8 00               	ldi 	000h
      72/    801A : BD                  	phi 	rxRPNStack
      73/    801B : F8 10               	ldi 	010h
      74/    801D : AD                  	plo 	rxRPNStack
      75/    801E :                     
      76/    801E : F8 80               	ldi 	TestCode/256
      77/    8020 : BC                  	phi	 	rxCode
      78/    8021 : F8 2F               	ldi 	TestCode&255
      79/    8023 : AC                  	plo 	rxCode
      80/    8024 :                     
      81/    8024 : F8 81               	ldi 	Evaluate/256
      82/    8026 : B3                  	phi 	r3
      83/    8027 : F8 00               	ldi 	Evaluate&255
      84/    8029 : A3                  	plo 	r3
      85/    802A :                     
      86/    802A : 79                  	mark
      87/    802B : D3                  	sep 	r3
      88/    802C : 22                  	dec 	r2
      89/    802D :                     
      90/    802D : 30 2D               end1:br 	end1
      91/    802F :                     
      92/    802F :                     TestCode: 	
      93/    802F : FF 81 04            	db 		0FFh,081h,4
      94/    8032 : FF 82 01            	db		0FFh,082h,1
      95/    8035 : 96                  	db 		096h
      96/    8036 : 00                  	db 		000h
      97/    8037 :                     
      98/    8100 :                     	org 	8100h
      99/    8100 :                     
     100/    8100 :                     ; ************************************************************************************************
     101/    8100 :                     ;
     102/    8100 :                     ;	Set up the 'dummy' stack top value, constant zero.
     103/    8100 :                     ;
     104/    8100 :                     ; ************************************************************************************************
     105/    8100 :                     
     106/    8100 :                     Evaluate:
     107/    8100 : F8 00               	ldi 	0 										; First up, put a dummy value in for the current TOS
     108/    8102 : AF                  	plo 	rxTOS									; which is zero, constant type zero.
     109/    8103 : BF                  	phi 	rxTOS
     110/    8104 : AE                  	plo 	rxType
     111/    8105 :                     
     112/    8105 :                     ; ************************************************************************************************
     113/    8105 :                     ;
     114/    8105 :                     ;	Main Loop Here. If the following item is not part of an expression, we return, but
     115/    8105 :                     ; 	possibly with a L-Expression in rxTOS/rxType. If we want an r-expr we can re-enter.
     116/    8105 :                     ;
     117/    8105 :                     ; ************************************************************************************************
     118/    8105 :                     
     119/    8105 :                     __EVMainLoop:
     120/    8105 : E2                  	sex 	r2 										; use R2 as index for this bit.
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 3 - 27/10/2017 9:02:18


     121/    8106 :                     
     122/    8106 : 0C                  	ldn 	rxCode 									; look at next item
     123/    8107 : FE                  	shl 		 									; is it an expression part token ($80-$FF)
     124/    8108 : 33 0E               	bdf 	__EVNoExit1 							; if so skip this exit
     125/    810A :                     
     126/    810A : F8 00               	ldi 	0 										; return code 0 (no error)
     127/    810C : 12                  	inc 	r2 										; at this point we may have an l-expression
     128/    810D : (MACRO)             	return 											; so we reenter to make sure it's an r-expression.
     128/    810D : 71                          dis                                                                                                                             ; this program uses MARK-subroutines
     129/    810E :                     
     130/    810E :                     ; ************************************************************************************************
     131/    810E :                     ;
     132/    810E :                     ;	If the current value in the TOS registers is an 8 or 16 bit indirection, do that look up.
     133/    810E :                     ;
     134/    810E :                     ; ************************************************************************************************
     135/    810E :                     
     136/    810E :                     __EVNoExit1:
     137/    810E : 8E                  	glo 	rxType 									; if type is zero, no indirection required.
     138/    810F : 32 26               	bz 		__EVIsRExpr
     139/    8111 : FB 02               	xri 	2 										; if type is one, it's an 8 bit indirection.
     140/    8113 : 32 20               	bz 		__EV8BitIndirection
     141/    8115 :                     
     142/    8115 : 4F                  	lda 	rxTOS 									; read the low byte. 
     143/    8116 : AE                  	plo 	rxType
     144/    8117 : 0F                  	ldn 	rxTOS 									; read high
     145/    8118 : BF                  	phi 	rxTOS 									; copy into rTOS
     146/    8119 : 8E                  	glo 	rxType
     147/    811A : AF                  	plo 	rxTOS
     148/    811B : F8 00               	ldi 	0
     149/    811D : AE                  	plo 	rxType
     150/    811E : 30 26               	br 		__EVIsRExpr
     151/    8120 :                     
     152/    8120 :                     __EV8BitIndirection:
     153/    8120 : 0F                  	ldn 	rxTOS 									; byte read
     154/    8121 : AF                  	plo 	rxTOS 									; put in low byte
     155/    8122 : F8 00               	ldi 	0
     156/    8124 : BF                  	phi 	rxTOS 									; zero high byte and type.
     157/    8125 : AE                  	plo 	rxType
     158/    8126 :                     
     159/    8126 :                     ; ************************************************************************************************
     160/    8126 :                     ;
     161/    8126 :                     ;	We now have an R-Expr in the TOS registers. If we've reached the end of the expression
     162/    8126 :                     ; 	tokens, we can now exit with that.
     163/    8126 :                     ;
     164/    8126 :                     ; ************************************************************************************************
     165/    8126 :                     
     166/    8126 :                     __EVIsRExpr:
     167/    8126 : 0C                  	ldn 	rxCode 									; look at next item
     168/    8127 : FE                  	shl 											; is it an expression part token ($80-$FF)
     169/    8128 : 33 2E               	bdf 	__EVNoExit2 							; if so skip this exit
     170/    812A :                     
     171/    812A : 12                  	inc 	r2 										; at this point, we *know* we have an r-expr
     172/    812B : (MACRO)             	return 											; so we can make it re-entrant
     172/    812B : 71                          dis                                                                                                                             ; this program uses MARK-subroutines
     173/    812C : 30 00               	br 		Evaluate
     174/    812E :                     
     175/    812E :                     ; ************************************************************************************************
     176/    812E :                     ;
     177/    812E :                     ;	Now we have either operators or values. Firstly we do values. We have a new value, so we
     178/    812E :                     ;	push the old TOS value, now an r-expr definitely, on the stack, and get a new value in the
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 4 - 27/10/2017 9:02:18


     179/    812E :                     ; 	TOS *registers*.
     180/    812E :                     ;
     181/    812E :                     ;	There are four values : a variable, a short constant, a long constant, and a bit7 string.
     182/    812E :                     ;
     183/    812E :                     ; ************************************************************************************************
     184/    812E :                     
     185/    812E :                     __EVNoExit2:
     186/    812E : 0C                  	ldn 	rxCode 									; look at next item
     187/    812F : FC 60               	adi 	060h 									; DF will be set for A0-FF which are values.
     188/    8131 : 3B 69               	bnf 	__EVIsOperator
     189/    8133 :                     
     190/    8133 : 2D                  	dec 	rxRPNStack 								; push current TOS value onto the stack
     191/    8134 : 9F                  	ghi 	rxTOS 									
     192/    8135 : 5D                  	str 	rxRPNStack 								; high first, then low.
     193/    8136 : 2D                  	dec 	rxRPNStack
     194/    8137 : 8F                  	glo 	rxTOS 									; the new value can go in the registers.
     195/    8138 : 5D                  	str 	rxRPNStack
     196/    8139 :                     
     197/    8139 : F8 00               	ldi 	0 										; zero the type - most of the values are constants
     198/    813B : AE                  	plo 	rxType 									; the exception being variables which are l-exprs.
     199/    813C : BF                  	phi 	rxTOS 									; zero TOS.1
     200/    813D :                     ;
     201/    813D :                     ;	Check for short constant C0-FE and long constant FF low high
     202/    813D :                     ;
     203/    813D : 4C                  	lda 	rxCode 									; read and advance the code pointer.
     204/    813E : FC 40               	adi 	40h 									; DF set if C0-FF, D is 00-3F
     205/    8140 : 3B 4F               	bnf 	__EVNotConstant
     206/    8142 :                     
     207/    8142 : AF                  	plo 	rxTOS 									; save as top of stack
     208/    8143 : 2F                  	dec 	rxTOS 									; fix up as C0 is -2
     209/    8144 : 2F                  	dec 	rxTOS
     210/    8145 : FB 3F               	xri 	3Fh 									; check it was 3F, which is the long constant
     211/    8147 : 3A 05               	bnz 	__EVMainLoop
     212/    8149 :                     
     213/    8149 : 4C                  	lda 	rxCode 									; read LSB/MSB in
     214/    814A : AF                  	plo 	rxTOS
     215/    814B : 4C                  	lda 	rxCode
     216/    814C : BF                  	phi 	rxTOS
     217/    814D : 30 05               	br 		__EVMainLoop
     218/    814F :                     ;
     219/    814F :                     ;	It must now be in the range A0-BF. Variable handler.
     220/    814F :                     ;
     221/    814F :                     __EVNotConstant:
     222/    814F : FC 20               	adi 	20h										; put into range 00-1F
     223/    8151 : FB 1F               	xri 	1Fh 									; if the value was BF it's a string
     224/    8153 : 32 5F               	bz 		__EVIsString
     225/    8155 : FB 1F               	xri 	1Fh 									; fix back.
     226/    8157 : FE                  	shl 											; double A
     227/    8158 : AF                  	plo 	rxTOS 									; point to variable.
     228/    8159 : F8 0D               	ldi 	Variables/256
     229/    815B : BF                  	phi 	rxTOS
     230/    815C : 1E                  	inc 	rxType 									; set type to 1 (16 bit indirect)
     231/    815D : 30 05               	br 		__EVMainLoop
     232/    815F :                     ;
     233/    815F :                     ;	String BF <string> terminated by bit 7 high
     234/    815F :                     ;
     235/    815F :                     __EVIsString:
     236/    815F : 8C                  	glo	 	rxCode 									; code pointer = string address
     237/    8160 : AF                  	plo 	rxTOS
     238/    8161 : 9C                  	ghi 	rxCode
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 5 - 27/10/2017 9:02:18


     239/    8162 : BF                  	phi 	rxTOS
     240/    8163 :                     __EVSkipString:
     241/    8163 : 4C                  	lda 	rxCode
     242/    8164 : FE                  	shl
     243/    8165 : 3B 63               	bnf 	__EVSkipString
     244/    8167 : 30 05               	br 		__EVMainLoop
     245/    8169 :                     
     246/    8169 :                     ; ************************************************************************************************
     247/    8169 :                     ;
     248/    8169 :                     ;			  We have found a Unary Operator (80-8F) or Binary Operator (90-9F)
     249/    8169 :                     ;
     250/    8169 :                     ; ************************************************************************************************
     251/    8169 :                     
     252/    8169 :                     __EVIsOperator:
     253/    8169 : 0C                  	ldn 	rxCode 									; get the code.
     254/    816A : FC 70               	adi 	70h 									; set DF if it is a binary operator.
     255/    816C : 8D                  	glo 	rxRPNStack 	 							; look at LS Nibble of RPN Stack
     256/    816D : FA 0F               	ani 	0Fh
     257/    816F : 32 8B               	bz 		__EVStackUnderflow  					; there's not at least one entry.
     258/    8171 : 3B 8F               	bnf 	__EVDispatch 							; if unary operator, go to dispatch.
     259/    8173 :                     
     260/    8173 : FB 0E               	xri 	0Eh 									; binary operator, so 0E is a bad value
     261/    8175 : 32 8B               	bz 		__EVStackUnderflow
     262/    8177 :                     
     263/    8177 : 0C                  	ldn 	rxCode 									; get code.
     264/    8178 : FC 69               	adi 	0FFh - 096h 							; values >= 097 will produce a DF
     265/    817A : 33 8F               	bdf 	__EVDispatch 							; $90-$96 (compares and subtract) all start
     266/    817C :                     													; with subtraction so we precalculate that.
     267/    817C : ED                  	sex 	rxRPNStack 								; now do the subtraction throwing the stack value.
     268/    817D : 8F                  	glo 	rxTOS
     269/    817E : F5                  	sd 															
     270/    817F : AF                  	plo 	rxTOS
     271/    8180 : 1D                  	inc 	rxRPNStack
     272/    8181 : 9F                  	ghi 	rxTOS
     273/    8182 : 75                  	sdb 															
     274/    8183 : BF                  	phi 	rxTOS
     275/    8184 : 1D                  	inc 	rxRPNStack 	
     276/    8185 :                     
     277/    8185 : F8 00               	ldi 	0 										; put DF into D
     278/    8187 : 7E                  	rshl 
     279/    8188 : BE                  	phi 	rxType 									; and save in rxType.1 (for comparisons)
     280/    8189 : 30 8F               	br 		__EVDispatch 							; go to the dispatcher
     281/    818B :                     ;
     282/    818B :                     __EVStackUnderflow:
     283/    818B : F8 81               	ldi 	ERR_Underflow							; fail evaluaition on stack underflow.
     284/    818D : 12                  	inc 	r2
     285/    818E : (MACRO)             	return 
     285/    818E : 71                          dis                                                                                                                             ; this program uses MARK-subroutines
     286/    818F :                     
     287/    818F :                     ; ************************************************************************************************
     288/    818F :                     ;
     289/    818F :                     ;							Actually execute a unary/binary operand
     290/    818F :                     ;
     291/    818F :                     ; ************************************************************************************************
     292/    818F :                     
     293/    818F :                     __EVDispatch:
     294/    818F : 4C                  	lda 	rxCode 									; get the code again, and skip it.
     295/    8190 : FE                  	shl 											; double it, also losing bit 7.
     296/    8191 : FC A3               	adi 	__EVDispatchTable&255
     297/    8193 : AB                  	plo 	rxRoutine 								; make rxRoutine point into the table
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 6 - 27/10/2017 9:02:18


     298/    8194 : F8 81               	ldi 	__EVDispatchTable/256 	
     299/    8196 : BB                  	phi 	rxRoutine
     300/    8197 : 4B                  	lda 	rxRoutine 								; read high byte
     301/    8198 : BE                  	phi 	rxType
     302/    8199 : 0B                  	ldn 	rxRoutine 								; read low byte and fix up
     303/    819A : AB                  	plo 	rxRoutine
     304/    819B : 9E                  	ghi 	rxType
     305/    819C : BB                  	phi	 	rxRoutine
     306/    819D :                     
     307/    819D : E2                  	sex 	r2 										; call the routine
     308/    819E : 79                  	mark
     309/    819F : DB                  	sep 	rxRoutine
     310/    81A0 : 22                  	dec 	r2	
     311/    81A1 : 30 05               	br 		__EVMainLoop 							; go round again.
     312/    81A3 :                     
     313/    81A3 :                     ; ************************************************************************************************
     314/    81A3 :                     ;
     315/    81A3 :                     ;	Vectors for operators. Note that the ASL assembler outputs this data in
     316/    81A3 :                     ;	high/low order.
     317/    81A3 :                     ;
     318/    81A3 :                     ; ************************************************************************************************
     319/    81A3 :                     
     320/    81A3 :                     __EVDispatchTable:
     321/    81A3 : 00 00               	dw 		0 										; $80 @
     322/    81A5 : 00 00               	dw 		0 										; $81 ?
     323/    81A7 : 00 00               	dw 		0 										; $82 ~
     324/    81A9 : 00 00               	dw 		0 										; $83 !
     325/    81AB : 00 00 00 00 00 00   	dw 		0,0,0,0,0,0,0,0,0,0,0,0 				; $84-$8F are unused.
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
                    00 00 00 00 00 00 
     326/    81C3 : 00 00               	dw 		0 										; $90 == (these are precalculated)
     327/    81C5 : 00 00               	dw 		0 										; $91 !=
     328/    81C7 : 00 00               	dw 		0 										; $92 <
     329/    81C9 : 00 00               	dw 		0 										; $93 >=
     330/    81CB : 00 00               	dw 		0 										; $94 <=
     331/    81CD : 00 00               	dw 		0 										; $95 >
     332/    81CF : 81 EC               	dw 		__EVSubtract 							; $96 - (which is already done)
     333/    81D1 : 81 E3               	dw 		__EVAdd 								; $97 +
     334/    81D3 : 00 00               	dw 		0 										; $98 *
     335/    81D5 : 00 00               	dw 		0 										; $99 /
     336/    81D7 : 00 00               	dw 		0 										; $9A %
     337/    81D9 : 00 00               	dw 		0 										; $9B &
     338/    81DB : 00 00               	dw 		0 										; $9C |
     339/    81DD : 00 00               	dw 		0 										; $9D ^
     340/    81DF : 00 00 00 00         	dw 		0,0										; $9E-$9F are unused.
     341/    81E3 :                     
     342/    81E3 :                     ; ************************************************************************************************
     343/    81E3 :                     ;
     344/    81E3 :                     ;	16 bit Addition
     345/    81E3 :                     ;
     346/    81E3 :                     ; ************************************************************************************************
     347/    81E3 :                     
     348/    81E3 :                     __EVAdd:
     349/    81E3 : ED                  	sex 	rxRPNStack 								; Addition of TOS + (stack)
     350/    81E4 : 8F                  	glo 	rxTOS
     351/    81E5 : F4                  	add
     352/    81E6 : AF                  	plo 	rxTOS
     353/    81E7 : 1D                  	inc 	rxRPNStack
     354/    81E8 : 9F                  	ghi 	rxTOS
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 7 - 27/10/2017 9:02:18


     355/    81E9 : 74                  	adc
     356/    81EA : BF                  	phi 	rxTOS
     357/    81EB : 1D                  	inc  	rxRPNStack 								; and fall through, subtraction precalculated
     358/    81EC :                     
     359/    81EC :                     ; ************************************************************************************************
     360/    81EC :                     ;
     361/    81EC :                     ;	16 bit Subtraction
     362/    81EC :                     ;
     363/    81EC :                     ; ************************************************************************************************
     364/    81EC :                     
     365/    81EC :                     __EVOpExit1:		
     366/    81EC :                     __EVSubtract: 										; Subtraction is precalculated so do nothing.
     367/    81EC : E2                  	sex 	r2
     368/    81ED : 12                  	inc 	r2
     369/    81EE : (MACRO)             	return
     369/    81EE : 71                          dis                                                                                                                             ; this program uses MARK-subroutines
     370/    81EF :                     
     371/    81EF :                     ; ************************************************************************************************
     372/    81EF :                     ;
     373/    81EF :                     ;	16 bit Bitwise AND
     374/    81EF :                     ;
     375/    81EF :                     ; ************************************************************************************************
     376/    81EF :                     
     377/    81EF :                     __EVAnd:
     378/    81EF : ED                  	sex 	rxRPNStack 								; Addition of TOS + (stack)
     379/    81F0 : 8F                  	glo 	rxTOS
     380/    81F1 : F2                  	and
     381/    81F2 : AF                  	plo 	rxTOS
     382/    81F3 : 1D                  	inc 	rxRPNStack
     383/    81F4 : 9F                  	ghi 	rxTOS
     384/    81F5 : F2                  	and
     385/    81F6 : BF                  	phi 	rxTOS
     386/    81F7 : 1D                  	inc  	rxRPNStack 						
     387/    81F8 : 30 EC               	br 		__EVOpExit1
     388/    81FA :                     
     389/    81FA :                     ; ************************************************************************************************
     390/    81FA :                     ;
     391/    81FA :                     ;	16 bit Bitwise OR
     392/    81FA :                     ;
     393/    81FA :                     ; ************************************************************************************************
     394/    81FA :                     
     395/    81FA :                     __EVOr:
     396/    81FA : ED                  	sex 	rxRPNStack 								; Addition of TOS + (stack)
     397/    81FB : 8F                  	glo 	rxTOS
     398/    81FC : F1                  	or
     399/    81FD : AF                  	plo 	rxTOS
     400/    81FE : 1D                  	inc 	rxRPNStack
     401/    81FF : 9F                  	ghi 	rxTOS
     402/    8200 : F1                  	or
     403/    8201 : BF                  	phi 	rxTOS
     404/    8202 : 1D                  	inc  	rxRPNStack 						
     405/    8203 :                     __EVOpExit2:
     406/    8203 : E2                  	sex 	r2
     407/    8204 : 12                  	inc 	r2
     408/    8205 : (MACRO)             	return
     408/    8205 : 71                          dis                                                                                                                             ; this program uses MARK-subroutines
     409/    8206 :                     
     410/    8206 :                     ; ************************************************************************************************
     411/    8206 :                     ;
     412/    8206 :                     ;	16 bit Bitwise XOR
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 8 - 27/10/2017 9:02:18


     413/    8206 :                     ;
     414/    8206 :                     ; ************************************************************************************************
     415/    8206 :                     
     416/    8206 :                     __EVXOr:
     417/    8206 : ED                  	sex 	rxRPNStack 								; Addition of TOS + (stack)
     418/    8207 : 8F                  	glo 	rxTOS
     419/    8208 : F3                  	xor
     420/    8209 : AF                  	plo 	rxTOS
     421/    820A : 1D                  	inc 	rxRPNStack
     422/    820B : 9F                  	ghi 	rxTOS
     423/    820C : F3                  	xor
     424/    820D : BF                  	phi 	rxTOS
     425/    820E : 1D                  	inc  	rxRPNStack 						
     426/    820F : 30 03               	br 		__EVOpExit2
 AS V1.42 Beta [Bld 114] - source file basic.asm - page 9 - 27/10/2017 9:02:18


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :                                        x86_64-unknown-linux - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                  27/10/2017 - |  END1 :                        802D C |
 ERR_UNDERFLOW :                 81 - |  EVALUATE :                    8100 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - | *RELAXED :                        0 - |
 RXCODE :                         C - |  RXROUTINE :                      B - |
 RXRPNSTACK :                     D - |  RXTOS :                          F - |
 RXTYPE :                         E - |  S1 :                          8012 C |
*SETUP :                       8018 C |  TESTCODE :                    802F C |
*TIME :                     9:02:18 - | *TRUE :                           1 - |
 VARIABLES :                    D00 - | *VERSION :                     142F - |
 __EV8BITINDIRECTION :         8120 C |  __EVADD :                     81E3 C |
*__EVAND :                     81EF C |  __EVDISPATCH :                818F C |
 __EVDISPATCHTABLE :           81A3 C |  __EVISOPERATOR :              8169 C |
 __EVISREXPR :                 8126 C |  __EVISSTRING :                815F C |
 __EVMAINLOOP :                8105 C |  __EVNOEXIT1 :                 810E C |
 __EVNOEXIT2 :                 812E C |  __EVNOTCONSTANT :             814F C |
 __EVOPEXIT1 :                 81EC C |  __EVOPEXIT2 :                 8203 C |
*__EVOR :                      81FA C |  __EVSKIPSTRING :              8163 C |
 __EVSTACKUNDERFLOW :          818B C |  __EVSUBTRACT :                81EC C |
*__EVXOR :                     8206 C |

     62 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 114] - source file basic.asm - page 10 - 27/10/2017 9:02:18


  defined macros:
  ---------------

RETURN                                |

      1 macro

 AS V1.42 Beta [Bld 114] - source file basic.asm - page 11 - 27/10/2017 9:02:18


  codepages:
  ----------

STANDARD (0 changed characters)


0.00 seconds assembly time

    426 lines source file
    431 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
